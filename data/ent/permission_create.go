// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/simple/data/ent/permission"
	"github.com/go-keg/simple/data/ent/role"
)

// PermissionCreate is the builder for creating a Permission entity.
type PermissionCreate struct {
	config
	mutation *PermissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PermissionCreate) SetCreatedAt(t time.Time) *PermissionCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableCreatedAt(t *time.Time) *PermissionCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PermissionCreate) SetUpdatedAt(t time.Time) *PermissionCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableUpdatedAt(t *time.Time) *PermissionCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetParentID sets the "parent_id" field.
func (pc *PermissionCreate) SetParentID(i int) *PermissionCreate {
	pc.mutation.SetParentID(i)
	return pc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableParentID(i *int) *PermissionCreate {
	if i != nil {
		pc.SetParentID(*i)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PermissionCreate) SetName(s string) *PermissionCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetKey sets the "key" field.
func (pc *PermissionCreate) SetKey(s string) *PermissionCreate {
	pc.mutation.SetKey(s)
	return pc
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableKey(s *string) *PermissionCreate {
	if s != nil {
		pc.SetKey(*s)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *PermissionCreate) SetType(pe permission.Type) *PermissionCreate {
	pc.mutation.SetType(pe)
	return pc
}

// SetPath sets the "path" field.
func (pc *PermissionCreate) SetPath(s string) *PermissionCreate {
	pc.mutation.SetPath(s)
	return pc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pc *PermissionCreate) SetNillablePath(s *string) *PermissionCreate {
	if s != nil {
		pc.SetPath(*s)
	}
	return pc
}

// SetDesc sets the "desc" field.
func (pc *PermissionCreate) SetDesc(s string) *PermissionCreate {
	pc.mutation.SetDesc(s)
	return pc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableDesc(s *string) *PermissionCreate {
	if s != nil {
		pc.SetDesc(*s)
	}
	return pc
}

// SetSort sets the "sort" field.
func (pc *PermissionCreate) SetSort(i int) *PermissionCreate {
	pc.mutation.SetSort(i)
	return pc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableSort(i *int) *PermissionCreate {
	if i != nil {
		pc.SetSort(*i)
	}
	return pc
}

// SetAttrs sets the "attrs" field.
func (pc *PermissionCreate) SetAttrs(m map[string]interface{}) *PermissionCreate {
	pc.mutation.SetAttrs(m)
	return pc
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (pc *PermissionCreate) AddRoleIDs(ids ...int) *PermissionCreate {
	pc.mutation.AddRoleIDs(ids...)
	return pc
}

// AddRoles adds the "roles" edges to the Role entity.
func (pc *PermissionCreate) AddRoles(r ...*Role) *PermissionCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Permission entity.
func (pc *PermissionCreate) SetParent(p *Permission) *PermissionCreate {
	return pc.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the Permission entity by IDs.
func (pc *PermissionCreate) AddChildIDs(ids ...int) *PermissionCreate {
	pc.mutation.AddChildIDs(ids...)
	return pc
}

// AddChildren adds the "children" edges to the Permission entity.
func (pc *PermissionCreate) AddChildren(p ...*Permission) *PermissionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddChildIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (pc *PermissionCreate) Mutation() *PermissionMutation {
	return pc.mutation
}

// Save creates the Permission in the database.
func (pc *PermissionCreate) Save(ctx context.Context) (*Permission, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PermissionCreate) SaveX(ctx context.Context) *Permission {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PermissionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PermissionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PermissionCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := permission.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := permission.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Sort(); !ok {
		v := permission.DefaultSort
		pc.mutation.SetSort(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PermissionCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Permission.name"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Permission.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := permission.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Permission.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Permission.sort"`)}
	}
	return nil
}

func (pc *PermissionCreate) sqlSave(ctx context.Context) (*Permission, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PermissionCreate) createSpec() (*Permission, *sqlgraph.CreateSpec) {
	var (
		_node = &Permission{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(permission.Table, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(permission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Key(); ok {
		_spec.SetField(permission.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(permission.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Path(); ok {
		_spec.SetField(permission.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := pc.mutation.Desc(); ok {
		_spec.SetField(permission.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := pc.mutation.Sort(); ok {
		_spec.SetField(permission.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if value, ok := pc.mutation.Attrs(); ok {
		_spec.SetField(permission.FieldAttrs, field.TypeJSON, value)
		_node.Attrs = value
	}
	if nodes := pc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ParentTable,
			Columns: []string{permission.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.ChildrenTable,
			Columns: []string{permission.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Permission.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PermissionCreate) OnConflict(opts ...sql.ConflictOption) *PermissionUpsertOne {
	pc.conflict = opts
	return &PermissionUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PermissionCreate) OnConflictColumns(columns ...string) *PermissionUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PermissionUpsertOne{
		create: pc,
	}
}

type (
	// PermissionUpsertOne is the builder for "upsert"-ing
	//  one Permission node.
	PermissionUpsertOne struct {
		create *PermissionCreate
	}

	// PermissionUpsert is the "OnConflict" setter.
	PermissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionUpsert) SetUpdatedAt(v time.Time) *PermissionUpsert {
	u.Set(permission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateUpdatedAt() *PermissionUpsert {
	u.SetExcluded(permission.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PermissionUpsert) ClearUpdatedAt() *PermissionUpsert {
	u.SetNull(permission.FieldUpdatedAt)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *PermissionUpsert) SetParentID(v int) *PermissionUpsert {
	u.Set(permission.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateParentID() *PermissionUpsert {
	u.SetExcluded(permission.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *PermissionUpsert) ClearParentID() *PermissionUpsert {
	u.SetNull(permission.FieldParentID)
	return u
}

// SetName sets the "name" field.
func (u *PermissionUpsert) SetName(v string) *PermissionUpsert {
	u.Set(permission.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateName() *PermissionUpsert {
	u.SetExcluded(permission.FieldName)
	return u
}

// SetKey sets the "key" field.
func (u *PermissionUpsert) SetKey(v string) *PermissionUpsert {
	u.Set(permission.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateKey() *PermissionUpsert {
	u.SetExcluded(permission.FieldKey)
	return u
}

// ClearKey clears the value of the "key" field.
func (u *PermissionUpsert) ClearKey() *PermissionUpsert {
	u.SetNull(permission.FieldKey)
	return u
}

// SetType sets the "type" field.
func (u *PermissionUpsert) SetType(v permission.Type) *PermissionUpsert {
	u.Set(permission.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateType() *PermissionUpsert {
	u.SetExcluded(permission.FieldType)
	return u
}

// SetPath sets the "path" field.
func (u *PermissionUpsert) SetPath(v string) *PermissionUpsert {
	u.Set(permission.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *PermissionUpsert) UpdatePath() *PermissionUpsert {
	u.SetExcluded(permission.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *PermissionUpsert) ClearPath() *PermissionUpsert {
	u.SetNull(permission.FieldPath)
	return u
}

// SetDesc sets the "desc" field.
func (u *PermissionUpsert) SetDesc(v string) *PermissionUpsert {
	u.Set(permission.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateDesc() *PermissionUpsert {
	u.SetExcluded(permission.FieldDesc)
	return u
}

// ClearDesc clears the value of the "desc" field.
func (u *PermissionUpsert) ClearDesc() *PermissionUpsert {
	u.SetNull(permission.FieldDesc)
	return u
}

// SetSort sets the "sort" field.
func (u *PermissionUpsert) SetSort(v int) *PermissionUpsert {
	u.Set(permission.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateSort() *PermissionUpsert {
	u.SetExcluded(permission.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *PermissionUpsert) AddSort(v int) *PermissionUpsert {
	u.Add(permission.FieldSort, v)
	return u
}

// SetAttrs sets the "attrs" field.
func (u *PermissionUpsert) SetAttrs(v map[string]interface{}) *PermissionUpsert {
	u.Set(permission.FieldAttrs, v)
	return u
}

// UpdateAttrs sets the "attrs" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateAttrs() *PermissionUpsert {
	u.SetExcluded(permission.FieldAttrs)
	return u
}

// ClearAttrs clears the value of the "attrs" field.
func (u *PermissionUpsert) ClearAttrs() *PermissionUpsert {
	u.SetNull(permission.FieldAttrs)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PermissionUpsertOne) UpdateNewValues() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(permission.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PermissionUpsertOne) Ignore() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionUpsertOne) DoNothing() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionCreate.OnConflict
// documentation for more info.
func (u *PermissionUpsertOne) Update(set func(*PermissionUpsert)) *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionUpsertOne) SetUpdatedAt(v time.Time) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateUpdatedAt() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PermissionUpsertOne) ClearUpdatedAt() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetParentID sets the "parent_id" field.
func (u *PermissionUpsertOne) SetParentID(v int) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateParentID() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *PermissionUpsertOne) ClearParentID() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearParentID()
	})
}

// SetName sets the "name" field.
func (u *PermissionUpsertOne) SetName(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateName() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateName()
	})
}

// SetKey sets the "key" field.
func (u *PermissionUpsertOne) SetKey(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateKey() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *PermissionUpsertOne) ClearKey() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearKey()
	})
}

// SetType sets the "type" field.
func (u *PermissionUpsertOne) SetType(v permission.Type) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateType() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateType()
	})
}

// SetPath sets the "path" field.
func (u *PermissionUpsertOne) SetPath(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdatePath() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *PermissionUpsertOne) ClearPath() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearPath()
	})
}

// SetDesc sets the "desc" field.
func (u *PermissionUpsertOne) SetDesc(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateDesc() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *PermissionUpsertOne) ClearDesc() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDesc()
	})
}

// SetSort sets the "sort" field.
func (u *PermissionUpsertOne) SetSort(v int) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *PermissionUpsertOne) AddSort(v int) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateSort() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateSort()
	})
}

// SetAttrs sets the "attrs" field.
func (u *PermissionUpsertOne) SetAttrs(v map[string]interface{}) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetAttrs(v)
	})
}

// UpdateAttrs sets the "attrs" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateAttrs() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateAttrs()
	})
}

// ClearAttrs clears the value of the "attrs" field.
func (u *PermissionUpsertOne) ClearAttrs() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearAttrs()
	})
}

// Exec executes the query.
func (u *PermissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PermissionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PermissionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PermissionCreateBulk is the builder for creating many Permission entities in bulk.
type PermissionCreateBulk struct {
	config
	err      error
	builders []*PermissionCreate
	conflict []sql.ConflictOption
}

// Save creates the Permission entities in the database.
func (pcb *PermissionCreateBulk) Save(ctx context.Context) ([]*Permission, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Permission, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PermissionCreateBulk) SaveX(ctx context.Context) []*Permission {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PermissionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Permission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PermissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *PermissionUpsertBulk {
	pcb.conflict = opts
	return &PermissionUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PermissionCreateBulk) OnConflictColumns(columns ...string) *PermissionUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PermissionUpsertBulk{
		create: pcb,
	}
}

// PermissionUpsertBulk is the builder for "upsert"-ing
// a bulk of Permission nodes.
type PermissionUpsertBulk struct {
	create *PermissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PermissionUpsertBulk) UpdateNewValues() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(permission.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PermissionUpsertBulk) Ignore() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionUpsertBulk) DoNothing() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionCreateBulk.OnConflict
// documentation for more info.
func (u *PermissionUpsertBulk) Update(set func(*PermissionUpsert)) *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionUpsertBulk) SetUpdatedAt(v time.Time) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateUpdatedAt() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PermissionUpsertBulk) ClearUpdatedAt() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetParentID sets the "parent_id" field.
func (u *PermissionUpsertBulk) SetParentID(v int) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateParentID() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *PermissionUpsertBulk) ClearParentID() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearParentID()
	})
}

// SetName sets the "name" field.
func (u *PermissionUpsertBulk) SetName(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateName() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateName()
	})
}

// SetKey sets the "key" field.
func (u *PermissionUpsertBulk) SetKey(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateKey() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *PermissionUpsertBulk) ClearKey() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearKey()
	})
}

// SetType sets the "type" field.
func (u *PermissionUpsertBulk) SetType(v permission.Type) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateType() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateType()
	})
}

// SetPath sets the "path" field.
func (u *PermissionUpsertBulk) SetPath(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdatePath() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *PermissionUpsertBulk) ClearPath() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearPath()
	})
}

// SetDesc sets the "desc" field.
func (u *PermissionUpsertBulk) SetDesc(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateDesc() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *PermissionUpsertBulk) ClearDesc() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDesc()
	})
}

// SetSort sets the "sort" field.
func (u *PermissionUpsertBulk) SetSort(v int) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *PermissionUpsertBulk) AddSort(v int) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateSort() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateSort()
	})
}

// SetAttrs sets the "attrs" field.
func (u *PermissionUpsertBulk) SetAttrs(v map[string]interface{}) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetAttrs(v)
	})
}

// UpdateAttrs sets the "attrs" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateAttrs() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateAttrs()
	})
}

// ClearAttrs clears the value of the "attrs" field.
func (u *PermissionUpsertBulk) ClearAttrs() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearAttrs()
	})
}

// Exec executes the query.
func (u *PermissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PermissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
